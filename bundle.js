!function(e){var n={};function t(o){if(n[o])return n[o].exports;var a=n[o]={i:o,l:!1,exports:{}};return e[o].call(a.exports,a,a.exports,t),a.l=!0,a.exports}t.m=e,t.c=n,t.d=function(e,n,o){t.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:o})},t.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},t.t=function(e,n){if(1&n&&(e=t(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(t.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var a in e)t.d(o,a,function(n){return e[n]}.bind(null,a));return o},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},t.p="/",t(t.s=0)}([function(e,n,t){e.exports=t(1)},function(e,n,t){t(2)(t(3))},function(e,n){e.exports=function(e){function n(e){"undefined"!=typeof console&&(console.error||console.log)("[Script Loader]",e)}try{"undefined"!=typeof execScript&&"undefined"!=typeof attachEvent&&"undefined"==typeof addEventListener?execScript(e):"undefined"!=typeof eval?eval.call(null,e):n("EvalError: No eval function available")}catch(e){n(e)}}},function(e,n){e.exports="/* global google */\nconst state = {\n  timeLimit: 15,\n  timeUnit: 700, // Surprise! Let's make the user more nervous\n  countdownInterval: null,\n  weatherAPIToken: '44fbf3cfb0839a699c0b9d84be12a46e',\n  weatherAPIURL: 'https://api.openweathermap.org/data/2.5/weather',\n  currentStrike: 0,\n};\n\nlet sv;\nlet panoramaElem;\n\nconst gameboardControls = document.querySelector('#gameboard__controls');\nconst countdownElem = document.querySelector('#gameboard__countdown');\nconst goodJobBadge = document.querySelector('#good-job-badge');\nconst badJobBadge = document.querySelector('#bad-job-badge');\nconst homePage = document.getElementById('home');\nconst gameboardPage = document.getElementById('gameboard');\nconst currentStrikeElem = document.getElementById('current-strike-number');\nconst bestScoreElem = document.getElementById('best-score-number');\n\nconst possibleLocations = [\n  { lat: 57.149651, lng: -2.099075 },\n  { lat: 37.869260, lng: -122.254811 },\n  { lat: 42.345573, lng: -71.098326 },\n  { lat: -34.397, lng: 150.644 },\n  { lat: 41.850, lng: -87.650 },\n  { lat: 35.717, lng: 139.731 },\n  { lat: 30.064742, lng: 31.249509 },\n  { lat: 61.218, lng: -149.900 },\n  { lat: 19.427, lng: -99.127 },\n  { lat: 51.500, lng: -0.126 },\n  { lat: -26.201, lng: 28.045 },\n  { lat: -4.325, lng: 15.322 },\n  { lat: -33.867, lng: 151.207 },\n  { lat: -25.363882, lng: 131.044922 },\n  { lat: -33.871, lng: 151.197 },\n  { lat: 40.729884, lng: -73.990988 },\n  { lat: 40.730031, lng: -73.991428 },\n];\n\n// Get best score from localstorage and set it up in UI\nbestScoreElem.innerText = localStorage.getItem('bestScore') || 0;\n\n// Basic set up after google maps API is ready\nwindow.initialize = () => {\n  sv = new google.maps.StreetViewService();\n  panoramaElem = new google.maps.StreetViewPanorama(document.getElementById('gameboard__pano'), {\n    disableDefaultUI: true,\n  });\n};\n\n// Changing the location\nconst updatePano = () => {\n  // Choose random location and save it in state\n  const location = possibleLocations[Math.floor(Math.random() * possibleLocations.length)];\n  state.location = location;\n\n  // Find a photo at chosen location outdoors in 5 km radius\n  sv.getPanorama({ location, radius: 5000, source: 'outdoor' }, (data, status) => {\n    // If found a photo set it up. If not search again\n    if (status === 'OK') {\n      if (state.pano === data.location.pano) return updatePano();\n      panoramaElem.setPano(data.location.pano);\n      panoramaElem.setPov({\n        heading: 270,\n        pitch: 0,\n      });\n      panoramaElem.setVisible(true);\n      state.pano = data.location.pano;\n\n      // Enable temperature buttons\n      gameboardControls.classList.add('gameboard__controls--active');\n\n      // Run countdown for the user\n      let timeLeft = state.timeLimit;\n      state.countdownInterval = setInterval(() => {\n        timeLeft -= 1;\n        countdownElem.innerHTML = timeLeft;\n        if (timeLeft <= 0) {\n          gameboardControls.classList.remove('gameboard__controls--active');\n          clearInterval(state.countdownInterval);\n          badJobBadge.classList.add('bad-job-badge--moving');\n          setTimeout(() => badJobBadge.classList.remove('bad-job-badge--moving'), 2000);\n          if (state.currentStrike > +localStorage.getItem('bestScore')) {\n            localStorage.setItem('bestScore', state.currentStrike);\n            bestScoreElem.innerText = state.currentStrike;\n          }\n          state.currentStrike = 0;\n          currentStrikeElem.innerText = state.currentStrike;\n          updatePano();\n        }\n      }, state.timeUnit);\n    } else {\n      updatePano();\n    }\n  });\n};\n// TODO: remove before going to high-load production with millions of users per second\nwindow.updatePano = updatePano;\n\n// Start game\ndocument.getElementById('home__start-btn').addEventListener('click', () => {\n  homePage.classList.remove('home--opened');\n  gameboardPage.classList.add('gameboard--opened');\n  updatePano();\n});\n\n// Handle user chose and clicked temperature button\n[].forEach.call(document.querySelectorAll('.gameboard__guess-btn'), (button) => {\n  button.addEventListener('click', () => {\n    // Disable temperature buttons\n    gameboardControls.classList.remove('gameboard__controls--active');\n    // Stop countdown\n    clearInterval(state.countdownInterval);\n\n    // Get real current temperature\n    fetch(`${state.weatherAPIURL}?lat=${state.location.lat}&lon=${state.location.lng}&appid=${state.weatherAPIToken}`)\n      .then(response => response.json())\n      .then((response) => {\n        // From Kelvin to C\n        const tempInC = response.main.temp - 273.15;\n        if (tempInC > +button.dataset.min && tempInC < +button.dataset.max) {\n          // Show great badge\n          goodJobBadge.classList.add('good-job-badge--moving');\n          setTimeout(() => goodJobBadge.classList.remove('good-job-badge--moving'), 2000);\n          state.currentStrike += 1;\n        } else {\n          // Show awful badge\n          badJobBadge.classList.add('bad-job-badge--moving');\n          setTimeout(() => badJobBadge.classList.remove('bad-job-badge--moving'), 2000);\n          if (state.currentStrike > +localStorage.getItem('bestScore')) {\n            localStorage.setItem('bestScore', state.currentStrike);\n            bestScoreElem.innerText = state.currentStrike;\n          }\n          state.currentStrike = 0;\n        }\n        currentStrikeElem.innerText = state.currentStrike;\n\n        // Stare new round\n        setTimeout(updatePano, 1800);\n      });\n  });\n});\n"}]);